blueprint:
  name: UniFi Protect Doorbell Notifications (WV)
  domain: automation
  source_url: https://raw.githubusercontent.com/AngellusMortis/unifiprotect_blueprints/main/blueprints/automation/unifiprotect/push_notification_doorbell_event.yaml
  description: "## UniFi Protect Doorbell Notifications\n\nThis blueprint will send
    push notifications to desktop browser / mobile Home Assistant apps / Telegram
    when a UniFi Chime is rung.\n\n### Required Settings\n\n  - UniFi Protect Doorbell
    Sensor\n\n### Optional Settings\n\n  - [HTML5 Push Notification Target][1] and/or
    [Mobile App Notification Target][2]\n  - Notification targets and toggles for
    following notifications types:\n    - [HTML5 Push Notification][1]\n    - [Mobile
    App Notification][2]\n    - [Telegram Notification][9]\n  - Time formatting strings.
    Timestamp is injected into the notification in case the notification is delay.\n
    \ - Cooldown before sending another notification\n  - Silence timer for muting
    notifications via Actionable Notification (docs: [HTML5][6], [Mobile][7])\n  -
    Configurable HA Internal / External Base URLs\n  - Configurable lovelace view
    from notification\n  - Optional Actionable Notification to unlock door entity
    or open gate for camera\n  - Optional TTS messages (requires [TTS integration][10]
    to be configured):\n    - TTS message to play through the doorbell when unlocking
    door\n    - Actionable Notification to play audio message through doorbell to
    respond to guest.\n\n### Requirements\n\nTo take full effect of this automation
    blueprint, your Home Assistant instance needs some setup beforehand.\n\n- A UniFi
    Protect NVR running on a UDM Pro, UNVR or other Protect Console\n- Home Assistant
    2022.2.0 or newer with the HA core version of the [UniFi Protect integration][8]\n-
    A UniFi camera pair with your NVR that has a chime (like the G4 Doorbell)\n- A
    valid HTTPS certificate and public facing Home Assistant instance\n  - If you
    do not have these, the actionable notifications and images will not appear in
    the notifications.\n  - You do not need your _whole_ Home Assistant to be publicly
    accessible. Only the paths `/api/camera_proxy/*` and `/api/webhook/*` need to
    be accessible outside of your network.\n- TTS messages require Home Assistant
    to be able to communicate to your cameras directly (**not** to your NVR). It will
    _not_ work if the internal LAN IP of the camera is not routable by Home Assistant.\n\n###
    Caveat About Actionable Notifications Limits\n\nHTML5 Push notification can only
    have a max of 2 actionable notifications. If you enable Silence, Unlock Door,
    Open Gate and Respond, Silence will not appear.\n\nAndroid Push notifications
    likewise have a limit of 3 actionable notifications. So if you have Open Camera,
    Silence, Unlock Door, Open Gate and Respond, Silence will not appear.\n\niOS is
    not affected by the limit (limit = 10).\n\n[1]: https://www.home-assistant.io/integrations/html5\n[2]:
    https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices\n[3]:
    https://www.home-assistant.io/integrations/html5#tag\n[4]: https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-channels\n[5]:
    https://companion.home-assistant.io/docs/notifications/notifications-basic/#replacing\n[6]:
    https://www.home-assistant.io/integrations/html5#actions\n[7]: https://companion.home-assistant.io/docs/notifications/actionable-notifications/\n[8]:
    https://www.home-assistant.io/integrations/unifiprotect/\n[9]: https://www.home-assistant.io/integrations/telegram/\n[10]:
    https://www.home-assistant.io/integrations/tts/\n"
  input:
    doorbell:
      name: Doorbell Entity
      description: 'The doorbell sensor you want to trigger notifications for.

        '
      selector:
        entity:
          integration: unifiprotect
          domain: binary_sensor
          device_class: occupancy
          multiple: false
    lock_entity:
      name: (Optional) Door Lock Entity
      description: 'The Lock entity to provide an actionable notification to unlock
        on doorbell ring. The time interval you have to respond to the unlock action
        is controlled by "Cooldown". Short Cooldown timers may prevent you from unlocking
        the door.

        '
      default: ''
      selector:
        entity:
          domain: lock
          multiple: false
    cover_entity:
      name: (Optional) Cover (Gate) Entity
      description: 'The Cover entity to provide an actionable notification to open
        gate on doorbell ring. The time interval you have to respond to the action
        is controlled by "Cooldown". Short Cooldown timers may prevent you from opening
        the gate.

        '
      default: ''
      selector:
        entity:
          domain: cover
          multiple: false
    tts_target:
      name: (Optional) TTS Service
      description: 'The TTS service you want to use to generate TTS messages https://www.home-assistant.io/integrations/tts/

        '
      default: ''
      selector:
        text: {}
    lock_tts:
      name: (Optional) Unlock TTS message
      description: 'TTS Message for play through doorbell when door is unlocked or
        gate opened.

        '
      default: ''
      selector:
        text: {}
    wait_tts:
      name: (Optional) TTS message
      description: 'Adds actionable notification to play TTS message to respond to
        guest. The time interval you have to respond to the TTS action is controlled
        by "Cooldown". Short Cooldown timers may prevent you from sending a TTS message
        the door.

        '
      default: ''
      selector:
        text: {}
    send_mobile:
      name: (Optional) Send Mobile App Notifications
      description: Send mobile app push notifications
      default: true
      selector:
        boolean: {}
    notify_target_app:
      name: (Optional) Notification Target (Mobile App)
      description: 'The notification target for mobile apps notifications. Should
        be only the specific service name in the notify domain. https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices

        '
      default: notify
      selector:
        text: {}
    send_html5:
      name: (Optional) Send HTML5 Notifications
      description: 'Send HTML5 push notifications. Requires you to have configured
        push notifications on at least one device.

        '
      default: false
      selector:
        boolean: {}
    notify_target_html5:
      name: (Optional) Notification Target (HTML5 Push)
      description: 'The notification target for HTML5 push notifications. Should be
        only the specific service name in the notify domain. https://www.home-assistant.io/integrations/html5

        '
      default: push_notification
      selector:
        text: {}
    channel:
      name: (Optional) Notification Channel
      description: 'Notification channel/tag to use. Will automatically be prepended
        with "Manual " if action is triggered manually. https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-channels

        '
      default: Doorbell
      selector:
        text: {}
    send_telegram:
      name: (Optional) Telegram Notification
      description: 'Send a notification via Telegram. Telegram notification will not
        have a link to Home Assistant like the mobile apps.

        '
      default: false
      selector:
        boolean: {}
    notify_telegram:
      name: (Optional) Notification Target (Telegram)
      description: 'The notification target for Telegram notifications. Should be
        name of the Telegram bot you have configured. https://www.home-assistant.io/integrations/telegram/

        '
      default: telegrambot
      selector:
        text: {}
    time_format:
      name: (Optional) Time Format String
      description: 'Python datetime format code string for the event trigger time.
        This string is the actual time the doorbell event was triggered in case the
        automation or notification is delayed. Manual triggers will cause this to
        always be the time of the previous event. https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes

        '
      default: '%I:%M %p'
      selector:
        text: {}
    cooldown:
      name: (Optional) Cooldown
      description: 'Delay before sending another notification for this camera after
        the last event. Is also the interval you have to respond to actions in notification.

        '
      default: 30
      selector:
        number:
          max: 300.0
          min: 0.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    silence_timer:
      name: (Optional) Silence Notifications
      description: 'How long to silence notifications for this camera when requested
        as part of the actionable notification. The time interval you have to respond
        to the slient action is controlled by "Cooldown". Short Cooldown timers may
        prevent you from silencing.

        '
      default: 30
      selector:
        number:
          max: 300.0
          min: 0.0
          unit_of_measurement: minutes
          mode: slider
          step: 1.0
    base_ha_url:
      name: (Optional) Base Home Assistant URL
      description: Base URL to use for opening HA links in HTML5 push notifications.
      default: http://homeassistant.local:8123
      selector:
        text: {}
    base_image_url:
      name: (Optional) Base Image URL
      description: 'Publicly accessible base URL for your Home Assistant instance.
        If you are using Nabu Casa, it should be that URL. May be different from your
        Base Home Assistant URL if your HA instance not publicly accessible. Must
        be an HTTPS URL with a valid certificate.

        '
      default: ''
      selector:
        text: {}
    lovelace_view:
      name: (Optional) Lovelace View
      description: 'Home Assistant Lovelace view to open when clicking notification.

        If left blank, URI Notification actions will not be generated.

        '
      default: ''
      selector:
        text: {}
    debug_enabled:
      name: (Optional) Debug
      description: 'Enable debugging for automation. If enabled, will send persistent
        notifications with extra data.

        '
      default: false
      selector:
        boolean: {}
mode: single
max_exceeded: silent
variables:
  input_doorbell: !input doorbell
  input_channel: !input channel
  input_base_image_url: !input base_image_url
  input_base_ha_url: !input base_ha_url
  input_lovelace_view: !input lovelace_view
  input_debug_enabled: !input debug_enabled
  input_notify_target_app: !input notify_target_app
  input_notify_target_html5: !input notify_target_html5
  input_notify_telegram: !input notify_telegram
  input_silence_timer: !input silence_timer
  input_lock_entity: !input lock_entity
  input_cover_entity: !input cover_entity
  input_send_mobile: !input send_mobile
  input_send_html5: !input send_html5
  input_send_telegram: !input send_telegram
  input_time_format: !input time_format
  input_lock_tts: !input lock_tts
  input_wait_tts: !input wait_tts
  input_tts_target: !input tts_target
  camera_entities: '[{% for eid in device_entities(device_id(input_doorbell)) %}{%if
    eid.startswith(''camera'') and not ''package'' in eid and not is_state(eid, ''unavailable'')
    %}"{{ eid }}",{% endif %}{% endfor %}]'
  media_entities: '[{% for eid in device_entities(device_id(input_doorbell)) %}{%if
    eid.startswith(''media_player'') and not is_state(eid, ''unavailable'') %}"{{
    eid }}",{% endif %}{% endfor %}]'
  lovelace_view: '{{ input_lovelace_view | trim }}'
  camera_entity_id: '{{ camera_entities | default([None]) | first }}'
  media_entity_id: '{{ media_entities | default([None]) | first }}'
  lock_entity_id: '{{ input_lock_entity or '''' }}'
  cover_entity_id: '{{ input_cover_entity or '''' }}'
  trigger_time: "{% if states[input_doorbell] == None %}\n  None\n{% else %}\n  {{
    as_local(states[input_doorbell].last_changed).strftime(input_time_format) }}\n{%
    endif %}\n"
  notification_channel: "{% if \"from_state\" in trigger %}\n  {{ input_channel }}\n{%
    else %}\n  Manual {{ input_channel }}\n{% endif %}\n"
  notification_tag: '{{ notification_channel.lower().replace('' '', ''-'') }}'
  notification_title: '{{ device_attr(input_doorbell, ''name'') }}'
  notification_url: "{% if lovelace_view == \"\" %}\n  None\n{% else %}\n  {{ input_base_ha_url
    | trim }}{{ lovelace_view }}\n{% endif %}\n"
  notification_message: Someone rang {{ notification_title }}{% if trigger_time !=
    None %} at {{ trigger_time }}{% endif %}.
  notification_message_html5: '{{ notification_message }}{% if notification_url !=
    None %}


    Tap to open camera in Home Assistant.

    {% endif %}

    '
  notification_image: "{% if camera_entity_id == None or input_base_image_url == \"\"
    %}\n  None\n{% else %}\n  {{ input_base_image_url | trim }}{{ state_attr(camera_entity_id,
    'entity_picture') }}\n{% endif %}\n"
  silence_action: silence-{{ input_doorbell }}
  unlock_action: unlock-{{ lock_entity_id }}
  uncover_action: uncover-{{ cover_entity_id }}
  tts_action: tts-{{ input_doorbell }}
  lock_tts_enabled: '{{ input_tts_target != '''' and input_lock_tts != '''' and media_entity_id
    != None }}'
  wait_tts_enabled: '{{ input_tts_target != '''' and input_wait_tts != '''' and media_entity_id
    != None }}'
trigger:
- platform: state
  entity_id: !input doorbell
  from: 'off'
  to: 'on'
action:
- choose:
  - conditions: '{{ input_debug_enabled }}'
    sequence:
    - service: notify.persistent_notification
      data:
        title: 'Debug: {{ notification_title }}'
        message: 'Entity ID: `{{ input_doorbell }}`

          Camera: `{{ camera_entity_id }}`

          Media Player: `{{ media_entity_id }}`

          Lock: `{{ lock_entity_id }}`

          Cover: `{{ cover_entity_id }}`

          Lock TTS: `{{ input_lock_tts }}` | `{{ lock_tts_enabled }}`

          Wait TTS: `{{ input_wait_tts }}` | `{{ wait_tts_enabled }}`

          TTS Service: `{{ input_tts_target }}`

          Notification Service (Mobile): `notify.{{ input_notify_target_app }}`

          Notification Service (HTML5): `notify.{{ input_notify_target_html5 }}`

          Notification Service (Telegram): `notify.{{ input_notify_telegram }}`


          Channel: {{ notification_channel }}

          Tag: {{ notification_tag }}

          Message: {{ notification_message }}

          Image: {{ notification_image }}

          URL: {{ notification_url }}

          '
- choose:
  - conditions: '{{ input_send_mobile }}'
    sequence:
    - service: notify.{{ input_notify_target_app }}
      data:
        message: '{{ notification_message }}'
        title: '{{ notification_title }}'
        data:
          tag: '{{ notification_tag }}'
          channel: '{{ notification_channel }}'
          ttl: 0
          priority: high
          time-sensitive: 1
          image: '{{ notification_image }}'
          attachment:
            url: '{{ notification_image }}'
          actions: '[ {% if notification_url != None %} { "action": "URI", "title":
            "Open Camera", "uri": "{{ lovelace_view }}" }, {% endif %} {% if lock_entity_id
            != "" %} { "action": "{{ unlock_action }}", "title": "Unlock Door" },
            {% endif %} {% if cover_entity_id != "" %} { "action": "{{ uncover_action
            }}", "title": "Open Gate" }, {% endif %} {% if wait_tts_enabled %} { "action":
            "{{ tts_action }}", "title": "Respond" }, {% endif %} {% if input_silence_timer
            > 0 %} { "action": "{{ silence_action }}", "title": "Silence", "destructive":
            True }, {% endif %} ]

            '
- choose:
  - conditions: '{{ input_send_html5 }}'
    sequence:
    - service: notify.{{ input_notify_target_html5 }}
      data:
        message: '{{ notification_message_html5 }}'
        title: '{{ notification_title }}'
        data:
          tag: '{{ notification_tag }}'
          image: '{{ notification_image }}'
          url: '{{ notification_url }}'
          actions: '[ {% if lock_entity_id != "" %} { "action": "{{ unlock_action
            }}", "title": "Unlock Door" }, {% endif %} {% if cover_entity_id != ""
            %} { "action": "{{ uncover_action }}", "title": "Open Gate" }, {% endif
            %} {% if wait_tts_enabled %} { "action": "{{ tts_action }}", "title":
            "Respond" }, {% endif %} {% if input_silence_timer > 0 %} { "action":
            "{{ silence_action }}", "title": "Silence" }, {% endif %} ]

            '
- choose:
  - conditions: '{{ input_send_telegram }}'
    sequence:
    - service: notify.{{ input_notify_telegram }}
      data:
        title: '{{ notification_title }}'
        message: '{{ notification_message }}'
        data: "{\n  {%- if notification_image != None -%}\n  \"photo\": {\n    \"url\":
          \"{{ notification_image }}\",\n    \"caption\": \"{{ notification_message
          }}\",\n    \"message_tag\": \"{{ notification_tag }}\",\n  },\n  {%- endif
          -%}\n  \"inline_keyboard\": [\n  {% if lock_entity_id != \"\" %}\n    \"Unlock
          Door:/{{ unlock_action }}\",\n  {% endif %}\n  {% if cover_entity_id !=
          \"\" %}\n    \"Open Gate:/{{ uncover_action }}\",\n  {% endif %}\n  {% if
          wait_tts_enabled %}\n    \"Respond:/{{ tts_action }}\",\n  {% endif %}\n
          \ {%- if input_silence_timer > 0 -%}\n    \"Silence:/{{ silence_action }}\"\n
          \ {%- endif -%}\n  ]\n}\n"
- wait_for_trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: '{{ silence_action }}'
  - platform: event
    event_type: html5_notification.clicked
    event_data:
      action: '{{ silence_action }}'
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /{{ silence_action }}
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: '{{ unlock_action }}'
  - platform: event
    event_type: html5_notification.clicked
    event_data:
      action: '{{ unlock_action }}'
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /{{ unlock_action }}
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: '{{ uncover_action }}'
  - platform: event
    event_type: html5_notification.clicked
    event_data:
      action: '{{ uncover_action }}'
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /{{ uncover_action }}
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: '{{ tts_action }}'
  - platform: event
    event_type: html5_notification.clicked
    event_data:
      action: '{{ tts_action }}'
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /{{ tts_action }}
  timeout:
    seconds: !input cooldown
  continue_on_timeout: false
- choose:
  - conditions: '{{ input_debug_enabled }}'
    sequence:
    - service: notify.persistent_notification
      data:
        title: 'Debug: {{ notification_title }}'
        message: 'Callback: `{{ wait.trigger.event.event_type }}`

          Action : `{{ wait.trigger.event.data.action | default("") }}`

          Action (Telegram): `{{ wait.trigger.event.data.data | default("") }}`

          '
- choose:
  - conditions: '{{ (wait.trigger.event.data.action == unlock_action or wait.trigger.event.data.data.endswith(unlock_action))
      and lock_entity_id != '''' }}'
    sequence:
    - choose:
      - conditions: '{{ input_debug_enabled }}'
        sequence:
        - service: notify.persistent_notification
          data:
            title: 'Debug: {{ notification_title }}'
            message: Unlock `{{ lock_entity_id }}`
    - service: lock.unlock
      data:
        entity_id: '{{ lock_entity_id }}'
    - choose:
      - conditions: '{{ lock_tts_enabled }}'
        sequence:
        - choose:
          - conditions: '{{ input_debug_enabled }}'
            sequence:
            - service: notify.persistent_notification
              data:
                title: 'Debug: {{ notification_title }}'
                message: 'Sending TTS: {{ input_lock_tts }}.'
        - service: tts.{{ input_tts_target }}
          data:
            entity_id: '{{ media_entity_id }}'
            message: '{{ input_lock_tts }}'
    - choose:
      - conditions: '{{ input_send_telegram }}'
        sequence:
        - service: telegram_bot.answer_callback_query
          data:
            message: Unlocked door{% if lock_tts_enabled %} and played "{{ input_lock_tts
              }}" TTS message{% endif %}
            callback_query_id: '{{ wait.trigger.event.data.id }}'
  - conditions: '{{ (wait.trigger.event.data.action == uncover_action or wait.trigger.event.data.data.endswith(uncover_action))
      and cover_entity_id != '''' }}'
    sequence:
    - choose:
      - conditions: '{{ input_debug_enabled }}'
        sequence:
        - service: notify.persistent_notification
          data:
            title: 'Debug: {{ notification_title }}'
            message: Open Gate `{{ cover_entity_id }}`
    - service: cover.open_cover
      data:
        entity_id: '{{ cover_entity_id }}'
    - choose:
      - conditions: '{{ lock_tts_enabled }}'
        sequence:
        - choose:
          - conditions: '{{ input_debug_enabled }}'
            sequence:
            - service: notify.persistent_notification
              data:
                title: 'Debug: {{ notification_title }}'
                message: 'Sending TTS: {{ input_lock_tts }}.'
        - service: tts.{{ input_tts_target }}
          data:
            entity_id: '{{ media_entity_id }}'
            message: '{{ input_lock_tts }}'
    - choose:
      - conditions: '{{ input_send_telegram }}'
        sequence:
        - service: telegram_bot.answer_callback_query
          data:
            message: Opened gate {% if lock_tts_enabled %} and played "{{ input_lock_tts
              }}" TTS message{% endif %}
            callback_query_id: '{{ wait.trigger.event.data.id }}'
  - conditions: '{{ (wait.trigger.event.data.action == silence_action or wait.trigger.event.data.data.endswith(silence_action))
      }}'
    sequence:
    - choose:
      - conditions: '{{ input_send_telegram }}'
        sequence:
        - service: telegram_bot.answer_callback_query
          data:
            message: Doorbell notifications silenced for {{ input_silence_timer }}
              minutes
            callback_query_id: '{{ wait.trigger.event.data.id }}'
    - choose:
      - conditions: '{{ input_debug_enabled }}'
        sequence:
        - service: notify.persistent_notification
          data:
            title: 'Debug: {{ notification_title }}'
            message: Silence started.
    - delay:
        minutes: '{{ input_silence_timer }}'
    - choose:
      - conditions: '{{ input_debug_enabled }}'
        sequence:
        - service: notify.persistent_notification
          data:
            title: 'Debug: {{ notification_title }}'
            message: Silence ended.
  - conditions: '{{ (wait.trigger.event.data.action == tts_action or wait.trigger.event.data.data.endswith(tts_action))
      and wait_tts_enabled }}'
    sequence:
    - choose:
      - conditions: '{{ input_debug_enabled }}'
        sequence:
        - service: notify.persistent_notification
          data:
            title: 'Debug: {{ notification_title }}'
            message: 'Sending TTS: {{ input_wait_tts }}.'
    - service: tts.{{ input_tts_target }}
      data:
        entity_id: '{{ media_entity_id }}'
        message: '{{ input_wait_tts }}'
    - choose:
      - conditions: '{{ input_send_telegram }}'
        sequence:
        - service: telegram_bot.answer_callback_query
          data:
            message: Played "{{ input_wait_tts }}" TTS message
            callback_query_id: '{{ wait.trigger.event.data.id }}'
