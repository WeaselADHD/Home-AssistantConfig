---
# Template
platform: template
sensors:

  power_day_eur:
    friendly_name: Power day euro
    value_template: "{{ states('sensor.power_high_day_euro') | float + states('sensor.power_low_day_euro') | float | round(1) }}"
    unit_of_measurement: "€"

  power_month_eur:
    friendly_name: Power month euro
    value_template: "{{ states('sensor.power_high_month_euro') | float + states('sensor.power_low_month_euro') | float | round(1) }}"
    unit_of_measurement: "€"

  utility_day_eur:
    friendly_name: Utility day euro
    value_template: "{{ states('sensor.gas_day_euro') | float + states('sensor.power_day_eur') | float | round(1) }}"
    unit_of_measurement: "€"

  utility_month_eur:
    friendly_name: Utility month euro
    value_template: "{{ states('sensor.gas_month_euro') | float + states('sensor.power_month_eur') | float | round(1) }}"
    unit_of_measurement: "€"

  power_current_se:
    friendly_name: Solaredge Current Power
    value_template: "{{ states('sensor.solaredge_current_power') | float | round(1) }}"
    unit_of_measurement: "W"

  sidebar_greeting:
    value_template: >
      {% set time = now().hour %}
      {% if time <= 1 %} Good night {{'\U0001F611'}}
      {% elif time <= 3 %} Good night {{'\U0001F62A'}}
      {% elif time <= 5 %} Good night {{'\U0001F634'}}
      {% elif time <= 7 %} Good morning {{'\U0001F4A9'}}
      {% elif time <= 9 %} Good morning {{'\u2615\uFE0F'}}
      {% elif time <= 10 %} Good morning {{'\U0001F642'}}
      {% elif time <= 13 %} Good day {{'\U0001F60A'}}
      {% elif time <= 15 %} Good day {{'\U0001F60E'}}
      {% elif time <= 17 %} Good day {{'\U0001F44B\U0001F3FB'}}
      {% elif time <= 19 %} Good evening {{'\U0001F44B\U0001F3FB'}}
      {% elif time <= 22 %} Good evening {{'\U0001F60C'}}
      {% elif time <= 23 %} Good evening {{'\U0001F974'}}
      {% else %} Good evening {{'\U0001F974'}}
      {% endif %}

  sidebar_active:
    value_template: >
      {% set lights = [states.light.kitchen, states.light.living_room, states.light.middle_room, states.light.dining_room, states.light.hue_white_lamp_studyroom, states.light.hue_white_lamp_bedroom, states.light.hue_being_ceiling_landing] %}
      {% set lights_on = lights | selectattr('state','eq','on') | list %}
      {% set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}
      {% set switches = [states.fan.living_room, states.media_player.living_room_tv, states.media_player.master_bedroom_tv, states.media_player.vuduo2] %}
      {% set switches_on = switches | selectattr('state','eq','on') | list %}
      {% set switches_name = switches | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}
      {% if (lights_on | length == 0) and (switches_on | length == 1) %}
      {{ switches_name }} is on
      {% elif (lights_on | length == 0) and (switches_on | length > 1) %}
      {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on
      {% elif (lights_on | length == 1) and (switches_on | length == 1) %}
      {{ lights_name }} and {{switches_name }} are on
      {% elif (lights_on | length == 1) and (switches_on | length > 1) %}
      {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on
      {% elif (lights_on | length > 1) and (switches_on | length == 1) %}
      {{ lights_on | length }} Lights and {{ switches_name }} are on
      {% elif (lights_on | length > 1) and (switches_on | length > 1) %}
      {{ lights_on | length }} Lights, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on
      {% elif (lights_on | length == 1) and (switches_on | length == 0) %}
      {{ lights_name }} is on
      {% elif (lights_on | length > 1) and (switches_on | length == 0) %}
      {{ lights_on | length}} Lights are on
      {% else %}
      <font color='#6a7377'>Everything is off</font>
      {% endif %}

  sidebar_vacuum:
    value_template: >
      {% set entity_id = 'vacuum.xiaomi_vacuum_cleaner' %}
      {% if is_state(entity_id, 'cleaning') %} Dusty is vacuuming
      {% elif is_state(entity_id, 'returning') %} Dusty is returning to the dock
      {% elif is_state(entity_id, 'paused') %} Dusty is paused
      {% elif is_state(entity_id, 'docked') %} Dusty is docked
      {% elif is_state(entity_id, 'charging') %} Dusty is charging
      {% endif %}

  sidebar_weather:
    value_template: >
      {% set temperature = states('sensor.br_temperature') %}
      {% set apparent = states('sensor.br_feel_temperature') | round %}
      {% set precip = states('sensor.br_rainchance_1d') | round %}
      {% if not is_state('sensor.br_temperature', 'unknown') %}
        {% if temperature | float <= 0.0 %}
          Feels like {{ apparent }}° with {{ precip }}% chance of snow {{'\u2744\uFE0F'}}
        {% elif temperature | float > 0.0 %}
          Feels like {{ apparent}}° with {{ precip }}% chance of rain {{ '\u2614\uFE0F' if precip > 30 }}
        {% endif %}
      {% else %}
        Unable to load weather information ...
      {% endif %}

  sidebar_day:
    icon_template: mdi:calendar
    value_template: >
      {% set days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sonday'] %}
      {{ days[now().weekday()] }}

  sidebar_date:
    icon_template: mdi:calendar
    value_template: >
      {% set months = ['January', 'February', 'March', 'April', 'May', 'June','July', 'August', 'September', 'October', 'November', 'December'] %}
      {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}

  private_countdown:
    friendly_name: Private
    icon_template: mdi:calendar
    value_template: >
      {% set start_time = state_attr('calendar.private', 'start_time') %}
      {% set end_time = state_attr('calendar.private', 'end_time') %}
      {% if start_time != None %}
        {% set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
        {% set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
        {% set hours = as_timestamp(start_time) | timestamp_custom('%H') | int / 24 %}
        {% set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
        {% set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A')  %}
        {% if count <= 0.0 %}
          {{'\U0001F6D2'}} Private today between {{ time }}-{{ time_end }}
        {% elif count <= 1.0 %}
          Private tomorrow between {{ time }}-{{ time_end }}
        {% elif count <= 2.0 %}
          Private the day after tomorrow between {{ time }}-{{ time_end }}
        {% else %}
          Private in {{ (count + hours) | round }} days on {{ day }} between {{ time }}-{{ time_end }}
        {% endif %}
      {% endif %}

  garbage_disposal:
    friendly_name: Garbage disposal
    icon_template: mdi:trash-can-outline
    value_template: >
      {% if is_state('sensor.afvalwijzer_next_in_days', '0') %} <ha-icon icon="mdi:trash-can-outline"></ha-icon> {{states("sensor.afvalwijzer_next_item") }} will be picked up today
      {% elif is_state('sensor.afvalwijzer_next_in_days', '1') %} <ha-icon icon="mdi:trash-can-outline"></ha-icon> {{states("sensor.afvalwijzer_next_item") }} will be picked up tomorrow
      {% elif not is_state('sensor.afvalwijzer_next_in_days', '1') and not is_state('sensor.afvalwijzer_next_in_days', '0') %} <ha-icon icon="mdi:trash-can-outline"></ha-icon> {{states("sensor.afvalwijzer_next_item") }} will be picked up in {{states("sensor.afvalwijzer_next_in_days") }} days at {{states("sensor.afvalwijzer_next_date") }}
      {% else %} No garbage disposal data known...
      {% endif %}
